
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

#define PORT 7500

#define BUFLEN 100

#define MSG "mes from bootstrap"

#define BACKLOG       10

#define SERV_PORT   5193
#define MAXLINE     1024

#define MAX_STRING_LEN 80

int main(int argc, char * argv[]) {
	int listensd, connsd;
	struct sockaddr_in servaddr;

	char buff[MAXLINE];
	char block[1024];
	int in, out;
	int nread;

	int bytecount;
	char MSG_ricevutoDaSuperpeer[MAXLINE];

	if ((listensd = socket(AF_INET, SOCK_STREAM, 0)) < 0) { /* crea il socket */
		perror(
"errore in socket");
		exit(1);
	}

	memset((void *) &servaddr, 0, sizeof(servaddr));
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY); /* il server accetta
	 connessioni su una qualunque delle sue intefacce di rete */
	servaddr.sin_port = htons(SERV_PORT); /* numero di porta del server */

	/* assegna l'indirizzo al socket */
	if ((bind(listensd, (struct sockaddr *) &servaddr, sizeof(servaddr))) < 0) {
		perror("errore in bind");
		exit(1);
	}

	if (listen(listensd, BACKLOG) < 0) {
		perror("errore in listen");
		exit(1);
	}

	for (;;) {
		/* accetta una connessione con un client */

		if ((connsd = accept(listensd, (struct sockaddr *) NULL, NULL)) < 0) {
			perror("errore in accept");
			exit(1);
		}

		//receive the greeting
		bytecount = recv(connsd, buff, BUFLEN - 1, 0);
		// ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);
		if (bytecount == -1) {
			perror("recv");
			exit(1);
		}

		buff[bytecount] = '\0';
		//MSG_ricevutoDaSuperpeer = buff;
		strcpy(MSG_ricevutoDaSuperpeer,buff);

		printf("MSG Received from Superpeer: \"%s\"\n", MSG_ricevutoDaSuperpeer);

		bytecount = recv(connsd, buff, BUFLEN - 1, 0);
		//Format: ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);
			if (bytecount == -1) {
				perror("recv");
				exit(1);
			}

		//send the reply
		if (send(connsd, MSG, strlen(MSG) + 1, 0) == -1) {
			perror("send");
			exit(1);
		}

		if (close(connsd) == -1) { /* chiude la connessione */
			perror("errore in close");
			exit(1);
		}
	}
	return 0;
}
